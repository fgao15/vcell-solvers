// Begin CVS Header
//   $Source: /fs/turing/cvs/copasi_dev/copasi/UI/CQExperimentData.h,v $
//   $Revision: 1.17.2.3 $
//   $Name: Build-33 $
//   $Author: shoops $
//   $Date: 2011/05/13 21:46:59 $
// End CVS Header

// Copyright (C) 2011 - 2010 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., University of Heidelberg, and The University
// of Manchester.
// All rights reserved.

#ifndef CQEXPERIMENTDATA_H
#define CQEXPERIMENTDATA_H

#include "ui_CQExperimentData.h"

class CExperimentSet;
class CExperimentFileInfo;
class CExperiment;
class CQExperimentDataValidator;
class QSignalMapper;
class CCrossValidationSet;
class CCopasiDataModel;

class CQExperimentData : public QDialog, public Ui::CQExperimentData
{
  Q_OBJECT

public:
  CQExperimentData(QWidget* parent = 0, const char* name = 0, bool modal = false, Qt::WindowFlags fl = 0);
  ~CQExperimentData();

  friend class CQExperimentDataValidator;

  virtual bool load(CExperimentSet * pExperimentSet , CCopasiDataModel * pDataModel);

public slots:
  virtual void loadTable(CExperiment * pExperiment, const bool & guess);

signals:
  void experimentChanged();

protected:
  unsigned int mOldWeightMethod;
  QPixmap mCopasi;
  QSignalMapper * mpBtnMap;
  CQExperimentDataValidator * mpValidatorHeader;
  CQExperimentDataValidator * mpValidatorLast;
  CExperiment * mpExperiment;
  CExperimentFileInfo * mpFileInfo;
  CExperimentSet * mpExperimentSet;
  CExperimentSet * mpExperimentSetCopy;
  std::map<std::string, std::string> mKeyMap;
  std::map<std::string, std::string> mFileMap;
  CQExperimentDataValidator * mpValidatorFirst;
  size_t mShown;
  CQExperimentDataValidator * mpValidatorName;
  QSignalMapper * mpComboMap;
  bool mCrossValidation;
  bool mShowError;
  CCopasiDataModel * mpDataModel;

  virtual bool loadExperiment(CExperiment * pExperiment);
  bool saveExperiment(CExperiment * pExperiment, const bool & full);
  void syncExperiments();
  bool saveTable(CExperiment * pExperiment);
  bool isLikePreviousExperiment(CExperiment * pExperiment);
  void enableEdit(const bool & enable);

protected slots:


  void slotRevert();
  void slotFirst();
  void slotLast();
  void slotHeader();
  void slotExprimentType(bool isSteadyState);
  void slotCheckTab(bool checked);
  void slotCheckHeader(bool checked);
  void slotExperimentAdd();
  void slotExperimentChanged(Q3ListBoxItem * pItem);
  void slotExperimentDelete();
  void slotFileAdd();
  void slotFileChanged(Q3ListBoxItem * pItem);
  void slotFileDelete();
  void slotCancel();
  void slotOK();
  void slotUpdateTable();
  void slotModelObject(int row);
  void slotTypeChanged(int row);
  void slotSeparator();
  void slotCheckFrom(bool checked);
  void slotCheckTo(bool checked);


private:
  void init();
  void destroy();

private slots:
  void slotWeightMethod(int weightMethod);

protected:
  enum IconID
  {
    image0_ID,
    image1_ID,
    unknown_ID
  };
  static QPixmap qt_get_icon(IconID id)
  {
    static const unsigned char image0_data[] =
    {
      0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
      0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
      0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
      0xdd, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x8d, 0x93, 0xbd, 0x6a, 0x55,
      0x41, 0x10, 0xc7, 0x7f, 0xb3, 0x67, 0xf7, 0x28, 0x18, 0x44, 0x24, 0x82,
      0x56, 0x56, 0xa2, 0x4d, 0x7c, 0x01, 0x9b, 0x54, 0xe2, 0x03, 0xd8, 0x5a,
      0xf9, 0x04, 0x3e, 0x80, 0x8d, 0x45, 0xc0, 0x5a, 0xb0, 0xb1, 0xb4, 0x11,
      0x04, 0x5b, 0xb5, 0xb0, 0x92, 0x40, 0x08, 0x1a, 0x3f, 0x90, 0x34, 0x26,
      0x51, 0x50, 0x50, 0xf1, 0x92, 0xfb, 0xed, 0xfd, 0xd8, 0xdd, 0x19, 0x8b,
      0x73, 0x4e, 0x3c, 0x68, 0x72, 0x71, 0x60, 0x61, 0x77, 0x76, 0xf7, 0xb7,
      0x33, 0xfb, 0x9f, 0x91, 0xf5, 0xcd, 0xed, 0xce, 0xa9, 0x93, 0x4b, 0xc7,
      0xd4, 0x8c, 0xc6, 0xd4, 0x60, 0x3a, 0x9d, 0x11, 0xe7, 0x91, 0xce, 0x7e,
      0xdf, 0xa5, 0xa8, 0xdd, 0x5e, 0x7f, 0x7c, 0xed, 0xe6, 0x8d, 0xab, 0x1f,
      0xf8, 0xdb, 0x5e, 0xbd, 0xdd, 0x99, 0xa8, 0xaa, 0xb5, 0x47, 0xce, 0xd9,
      0xc6, 0x93, 0x68, 0x83, 0x61, 0xb4, 0x37, 0xef, 0xf7, 0xec, 0xe3, 0xee,
      0x37, 0x7b, 0xf6, 0x62, 0xeb, 0xe7, 0x83, 0x87, 0x4f, 0x57, 0xcd, 0x8c,
      0xf6, 0x70, 0xff, 0x10, 0x01, 0x11, 0xc1, 0x39, 0x10, 0xa7, 0xb8, 0xc2,
      0x71, 0xf6, 0xdc, 0x32, 0xab, 0x57, 0x56, 0x96, 0x2f, 0x5d, 0x38, 0xff,
      0xfc, 0xd1, 0x93, 0x97, 0xd7, 0xdb, 0x67, 0x0f, 0x05, 0x18, 0x20, 0x40,
      0x59, 0x7a, 0x3e, 0x7d, 0xfe, 0xc2, 0xc6, 0xc6, 0x16, 0xaf, 0xdf, 0x6d,
      0x93, 0xe2, 0xb4, 0x1c, 0x0e, 0x7a, 0x8f, 0x6f, 0xdf, 0xb9, 0x7f, 0x6b,
      0x21, 0x00, 0x40, 0x9c, 0xe0, 0x04, 0xce, 0x2c, 0x9f, 0x66, 0x1e, 0x8d,
      0x1f, 0xdf, 0xbb, 0xec, 0xec, 0x7e, 0xa5, 0x3c, 0x5e, 0x32, 0x1c, 0xf5,
      0xd6, 0x9a, 0x73, 0xfe, 0xd0, 0xcb, 0x80, 0x13, 0x21, 0x45, 0xe5, 0xf2,
      0xca, 0x45, 0x66, 0xd3, 0xc8, 0x7e, 0xb7, 0x4f, 0x67, 0xbf, 0x47, 0x08,
      0x25, 0x9b, 0x1b, 0xeb, 0x2c, 0x04, 0x98, 0x19, 0x39, 0x2b, 0x89, 0x4c,
      0xaf, 0xf7, 0x8b, 0xd1, 0x68, 0xca, 0x6c, 0x36, 0xa7, 0x0c, 0x81, 0x10,
      0x3c, 0x45, 0x51, 0x2c, 0x06, 0x24, 0x35, 0x86, 0xa3, 0x39, 0x29, 0x25,
      0x34, 0x1b, 0x65, 0x19, 0x10, 0x07, 0xaa, 0x4a, 0xf0, 0x01, 0x11, 0x8e,
      0x06, 0xc4, 0xac, 0x4c, 0x26, 0x91, 0xac, 0x55, 0x32, 0xae, 0x10, 0x3c,
      0x0e, 0x91, 0x92, 0x9c, 0x13, 0x21, 0x84, 0x3a, 0xc9, 0x06, 0x50, 0xcf,
      0xa7, 0x31, 0x23, 0x40, 0x4c, 0xb9, 0x56, 0xc0, 0xa1, 0x19, 0xc4, 0x41,
      0x12, 0x45, 0xb2, 0x02, 0x9e, 0xc2, 0x7b, 0xa4, 0x15, 0x82, 0x6f, 0x64,
      0x48, 0x49, 0x0f, 0x42, 0x93, 0x42, 0x20, 0x19, 0x82, 0x54, 0x35, 0x21,
      0x82, 0x15, 0xe0, 0x14, 0x0a, 0x81, 0x4a, 0xe8, 0xca, 0x9c, 0xb6, 0x7f,
      0x1e, 0x2a, 0x48, 0xe3, 0xac, 0xe9, 0xae, 0x70, 0x08, 0x0e, 0x11, 0xa9,
      0x5f, 0xff, 0x13, 0xc1, 0x91, 0x75, 0xf0, 0xbf, 0xe6, 0x1a, 0x82, 0x69,
      0xd5, 0x44, 0x58, 0x15, 0x60, 0xab, 0xb7, 0x30, 0xad, 0x17, 0x56, 0x49,
      0xdc, 0x4e, 0xc1, 0x37, 0x7b, 0x4b, 0x27, 0xc2, 0x81, 0x53, 0xa1, 0x52,
      0xc1, 0x20, 0x25, 0x23, 0xab, 0x91, 0x72, 0x46, 0x63, 0xc6, 0x87, 0x92,
      0xb6, 0x8e, 0xbe, 0x3f, 0x18, 0x8c, 0xd7, 0xee, 0xde, 0x4b, 0xce, 0xf9,
      0xfa, 0x11, 0x45, 0x70, 0x98, 0x29, 0x66, 0x60, 0x75, 0x67, 0x98, 0x19,
      0x98, 0x21, 0xe2, 0x18, 0x0f, 0x86, 0xb3, 0x06, 0xf0, 0x1b, 0xda, 0xc4,
      0xfd, 0x8b, 0x61, 0x0d, 0x6a, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
      0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
    };

    static const unsigned char image1_data[] =
    {
      0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
      0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
      0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x02,
      0x7c, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x7d, 0x93, 0x5d, 0x68, 0x8e,
      0x61, 0x18, 0xc7, 0x7f, 0xf7, 0xfd, 0x3c, 0xf7, 0xf3, 0xce, 0x5e, 0x66,
      0x63, 0xbe, 0x45, 0xbe, 0xb2, 0x48, 0xc9, 0x81, 0x14, 0x49, 0x42, 0x0e,
      0x70, 0xb4, 0x13, 0x07, 0x8e, 0x28, 0x25, 0xca, 0x28, 0x49, 0x51, 0x1c,
      0xcc, 0x47, 0x39, 0x21, 0x1f, 0x71, 0x20, 0x39, 0x51, 0x6a, 0x25, 0xc5,
      0x94, 0x1d, 0x88, 0xb1, 0x96, 0xcd, 0x47, 0xbe, 0xc6, 0x36, 0x9f, 0xb3,
      0x79, 0x37, 0xdb, 0xfb, 0xb1, 0x87, 0x77, 0xef, 0xf3, 0x3c, 0xf7, 0xe5,
      0xc0, 0xfb, 0xda, 0x8b, 0xe5, 0xaa, 0xab, 0xae, 0x83, 0xeb, 0xfa, 0xdf,
      0xff, 0x8f, 0x6e, 0xd5, 0xd8, 0xfc, 0xb2, 0xaf, 0xbc, 0x6c, 0x74, 0xcc,
      0x8a, 0x50, 0x28, 0x2b, 0x90, 0xcd, 0x0e, 0x11, 0xe4, 0x02, 0xfa, 0xfa,
      0x53, 0x3a, 0x0c, 0xec, 0x40, 0x32, 0xe5, 0xaf, 0xdf, 0xba, 0x65, 0xdd,
      0x73, 0xfe, 0xae, 0x47, 0x4f, 0xda, 0x7f, 0x58, 0x6b, 0xa5, 0xb8, 0xa3,
      0x28, 0x12, 0xff, 0x47, 0x20, 0xe9, 0x4c, 0x20, 0x8f, 0x9f, 0x75, 0xca,
      0xdb, 0x8e, 0x6e, 0xa9, 0x6f, 0x68, 0xed, 0xbd, 0x78, 0xe5, 0xd6, 0x2a,
      0x11, 0xa1, 0xb8, 0xf5, 0x3f, 0x88, 0x80, 0x52, 0x0a, 0xad, 0x41, 0x69,
      0x8b, 0x76, 0x34, 0x93, 0xa7, 0x54, 0xb2, 0x6a, 0xf9, 0xa2, 0xca, 0xaa,
      0x79, 0x33, 0x6f, 0x5f, 0xad, 0xbb, 0x57, 0x5d, 0xbc, 0x3b, 0x22, 0x80,
      0x00, 0x0a, 0xf0, 0x3c, 0x97, 0x77, 0xef, 0x3f, 0xd1, 0xd4, 0xd4, 0x4a,
      0xcb, 0xd3, 0x97, 0x84, 0x41, 0xd6, 0xcb, 0xa4, 0x93, 0xd7, 0x0e, 0x1e,
      0x39, 0x5b, 0xf3, 0x5f, 0x00, 0x00, 0xa5, 0x15, 0x5a, 0xc1, 0x84, 0xca,
      0x71, 0xe4, 0xac, 0xe2, 0x6b, 0x4f, 0x8a, 0xf6, 0x8e, 0x4f, 0x78, 0x25,
      0x1e, 0x99, 0xc1, 0x64, 0x6d, 0x61, 0xcf, 0x1d, 0xf1, 0x18, 0xd0, 0x4a,
      0x11, 0x06, 0x21, 0x8b, 0x16, 0x57, 0x91, 0xcb, 0x06, 0xf4, 0x65, 0x86,
      0xe8, 0xef, 0xee, 0xc6, 0x18, 0x8f, 0xe6, 0xa6, 0xc6, 0x11, 0x24, 0xd8,
      0x08, 0x5e, 0x35, 0x43, 0x5b, 0x0b, 0x16, 0x08, 0x05, 0x42, 0x63, 0x18,
      0xec, 0xec, 0x44, 0x9f, 0xd8, 0x83, 0x69, 0xa8, 0xc3, 0x94, 0xc6, 0xf1,
      0x3c, 0x83, 0xe3, 0x38, 0xbf, 0xcf, 0x86, 0x19, 0x7c, 0x7e, 0x03, 0x0f,
      0xeb, 0xc1, 0x4f, 0x22, 0x1f, 0x3b, 0xf1, 0x57, 0x54, 0x23, 0x1f, 0xda,
      0xa8, 0x38, 0x75, 0x80, 0x58, 0x43, 0x3d, 0xa3, 0x66, 0x3c, 0x20, 0x58,
      0xb8, 0x14, 0x3d, 0x71, 0x1a, 0x4a, 0x31, 0x02, 0xc0, 0x94, 0x39, 0x30,
      0x73, 0x3e, 0xdc, 0xa9, 0xc3, 0x69, 0xbb, 0x44, 0xfc, 0x51, 0x23, 0xba,
      0xbd, 0x1d, 0x73, 0xef, 0x2e, 0xc1, 0xd4, 0xd9, 0x0c, 0xec, 0x3c, 0x8c,
      0x53, 0x39, 0x09, 0xa3, 0x6c, 0x5e, 0x64, 0x01, 0x20, 0x3f, 0x67, 0xb5,
      0x8b, 0x5a, 0x59, 0x8d, 0xfa, 0x3e, 0x84, 0xb9, 0x7a, 0x9e, 0xd8, 0x8b,
      0x1b, 0x90, 0x18, 0x20, 0x58, 0xb0, 0x98, 0xfe, 0x43, 0x67, 0x08, 0x66,
      0x55, 0xe1, 0x0c, 0x0e, 0xe2, 0xb8, 0x2e, 0xaa, 0x88, 0x82, 0x5b, 0x30,
      0x21, 0x8c, 0x40, 0x19, 0x07, 0x57, 0x97, 0xa0, 0xba, 0x12, 0xf0, 0xa5,
      0x17, 0x32, 0x59, 0xe8, 0xfa, 0x86, 0xb2, 0x0a, 0xe5, 0x19, 0x1c, 0x05,
      0x8e, 0x2a, 0x04, 0x9d, 0x37, 0xd1, 0x16, 0x9c, 0x0f, 0x72, 0x78, 0x57,
      0x4e, 0x13, 0x3b, 0xbe, 0x1f, 0x7a, 0x53, 0x44, 0x4b, 0x96, 0x61, 0xe3,
      0xe3, 0x31, 0x2d, 0xaf, 0x19, 0xbf, 0x61, 0x2d, 0xb1, 0x9b, 0x37, 0x60,
      0x54, 0x69, 0xfe, 0xf5, 0x61, 0x06, 0xbf, 0x53, 0x70, 0xef, 0xd7, 0x63,
      0xce, 0x1c, 0x83, 0x9e, 0x3e, 0x72, 0x9b, 0xb7, 0x92, 0xb9, 0x7c, 0x1b,
      0xff, 0xe4, 0x05, 0xa4, 0x6c, 0x2c, 0x4e, 0x22, 0x41, 0xf9, 0xde, 0x5d,
      0xe8, 0x44, 0x0f, 0x62, 0xbc, 0x3f, 0x22, 0x1f, 0x96, 0xb0, 0x74, 0x35,
      0x6a, 0xf5, 0x26, 0x64, 0xfa, 0x5c, 0x72, 0xdb, 0x6a, 0x10, 0x11, 0x82,
      0x8d, 0x1b, 0x49, 0x5e, 0xbb, 0x4e, 0xe9, 0xbe, 0xdd, 0xf8, 0xdb, 0x77,
      0x60, 0xc7, 0x8c, 0xc5, 0x09, 0xc2, 0x3f, 0x24, 0xb8, 0x36, 0x3f, 0xc7,
      0x2b, 0xca, 0xe0, 0xe8, 0x39, 0x04, 0x30, 0x40, 0x14, 0x81, 0x08, 0x44,
      0x6b, 0x56, 0x92, 0x7b, 0xdc, 0x8a, 0x0a, 0x84, 0xb8, 0x9f, 0xc3, 0x75,
      0x0d, 0xc5, 0x39, 0xba, 0xa9, 0x74, 0xda, 0xaf, 0x3d, 0x7e, 0x3a, 0xd4,
      0xfa, 0x57, 0xa2, 0x82, 0x45, 0xa1, 0x11, 0xb1, 0x88, 0x80, 0xe4, 0x7f,
      0x86, 0x88, 0x80, 0x08, 0x4a, 0x69, 0xfc, 0x74, 0x66, 0xa8, 0x00, 0xf0,
      0x13, 0xf0, 0x32, 0x22, 0x79, 0x63, 0x5a, 0xb7, 0x6f, 0x00, 0x00, 0x00,
      0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
    };

    switch (id)
      {
        case image0_ID:  { QImage img; img.loadFromData(image0_data, sizeof(image0_data), "PNG"); return QPixmap::fromImage(img); }
        case image1_ID:  { QImage img; img.loadFromData(image1_data, sizeof(image1_data), "PNG"); return QPixmap::fromImage(img); }
        default: return QPixmap();
      } // switch
  } // icon

};

#endif // CQEXPERIMENTDATA_H

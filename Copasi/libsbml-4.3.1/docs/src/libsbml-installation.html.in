<center>
<table border="0">
<tr><td>
<a href="#quick">1. Quick start instructions</a>
<ul>
<li><a href="#quick-download">Avoiding work by using ready-to-install binaries</li> 

<li><a href="#quick-unix">Building libSBML on Linux, MacOS X, FreeBSD, 
Solaris, and Cygwin</a></li> 

<li><a href="#quick-windows">Building libSBML on Windows</a></li>
</ul>
</td></tr>

<tr><td>
<a href="#detailed">2. Detailed instructions for configuring and installing
LibSBML</a> 

<ul>

<li><a href="#basic-config">Configuring libSBML
for Linux, Mac&nbsp;OS&nbsp;X, Solaris, and Cygwin</a></li> 

<li><a href="#other-lang">Configuring libSBML
interfaces to C#, Java, Perl, Python, MATLAB, Octave and Ruby</a></li> 

<li><a href="#other-options">Additional configuration options</a></li> 

<ul>

<li><a href="#univbinary">Creating 32- and/or 64-bit binaries</a></li>

<li><a href="#univbinary">Creating universal binaries on Mac&nbsp;OS&nbsp;X</a></li>

<li><a href="#swig">Configuring for SWIG</a></li>

<li><a href="#unit-testing">Configuring for unit
testing</a></li> 

<li><a href="#compression">Configuring support
for compression</a></li>

<li><a href="#docs">Configuring for generating
documentation</a></li> 

</ul>

<li><a href="#compiling">Compiling and installing
LibSBML on Unix, Linux and Mac&nbsp;OS&nbsp;X</a></li> 

<li><a href="#windows">Configuring and building
for Windows</li> 

</ul>

</ul>
</td></tr>

<tr><td>
<a href="#locations">3. Files installed by libSBML, and their locations</a> 
</td></tr>

<tr><td>
<a href="#accessing">4. What to do after building and installing libSBML</a> 
</td></tr>

</table>
</center>


<h2><a class="anchor" name="quick">1. Quick start instructions</a></h2>

<p> <em>Compatibility warning</em>: The default XML parser library used by
libSBML is <a target="_blank" href="http://xmlsoft.org">libxml2</a>.  If
you chose to use another XML parser library instead, beware there is a
known bug in Xerces 2.6.0 that cannot be worked around at this time and
causes errors in software using it.  Xerces versions 2.2 &#150; 2.5, and
2.7.0 and above, are known to work properly, and all Expat versions above
1.95.8 are also known to work.


<h3><a class="anchor" name="quick-download">Avoiding work by using ready-to-install
binaries</a></h3>

<p> Check the <a target="_blank"
href="http://sf.net/projects/sbml/files/libsbml/@PACKAGE_VERSION@">download
site for libSBML on SourceForge.net</a> for possible installation packages
for your operating system.  We supply ready-to-install precompiled binaries
for many systems, so that you may be able to save yourself the time and
trouble of following the remaining instructions on this page.



<h3><a class="anchor" name="quick-unix">Building libSBML on Linux,
Mac&nbsp;OS&nbsp;X, FreeBSD, Solaris, and Cygwin</a></h3>

<p> If there is no installer for your system, or you prefer to build
libSBML from the source distribution, proceed as follows.  Download and
unzip the source code archive somewhere on your file system, and in a
shell (terminal), <code>cd</code> into the directory thereby created (e.g.,
<code>libsbml-4.1.0</code>).  If you <em>only</em> want to build the C and
C++ interfaces and install libSBML into <code>/usr/local</code> (the
default), then configuring libSBML is simply a matter of executing the
following command:

<div class="fragment"><pre class="fragment">
  ./configure
</pre></div>

<p> It will by default attempt to use the <a target="_blank"
href="http://xmlsoft.org">libxml2</a> XML library; if you do not have
libxml2 version 2.6.16 or later on your system, the <code>configure</code>
program will terminate with an error explaining it cannot find libxml2.  In
that case, you can inform the <code>configure</code> program to use the <a
target="_blank" href="http://expat.sourceforge.net/">Expat</a> or <a
target="_blank" href="http://http://xerces.apache.org/xerces-c/">Xerces</a>
libraries instead.  For Expat, use the following command:

<div class="fragment"><pre class="fragment">
  ./configure --with-expat
</pre></div>

<p>
And for Xerces, use

<div class="fragment"><pre class="fragment">
  ./configure --with-xerces
</pre></div>

<p> If, in addition to the C and C++ interfaces, you want to configure
libSBML to build the C#, Java, Python, Perl, MATLAB, Octave, and/or Ruby
APIs as well, then add the flags <nobr><code>--with-csharp</code></nobr>,
<nobr><code>--with-java</code></nobr>,
<nobr><code>--with-python</code></nobr>,
<nobr><code>--with-perl</code></nobr>,
<nobr><code>--with-matlab</code></nobr>,
<nobr><code>--with-octave</code></nobr>, and/or
<nobr><code>--with-ruby</code></nobr> (respectively) to the
<code>configure</code> program.  You can supply more than one of these
flags at the same time.

<p> Depending on your system, you may need to tell the
<code>configure</code> program where to find some of these extra components
by adding a directory path after the option.  For example, to use a copy of
Java whose components are in <code>/usr/local</code> (with the executable
programs in <code>/usr/local/bin</code> and library files in
<code>/usr/local/lib</code>), use

<div class="fragment"><pre class="fragment">
  ./configure --with-expat --with-python --with-java=/usr/local
</pre></div>

<p> Once you've successfully configured libSBML, run the following two
commands to build and install it:

<div class="fragment"><pre class="fragment">
  make               # Note: use 'gmake' on FreeBSD
  make install       # Note: use 'gmake install' on FreeBSD
</pre></div>

<p> To call and access libSBML from your software application, please refer
to the instructions in the section titled <a
href="libsbml-accessing.html">Making libSBML accessible to your
software</a>.

<p> Documentation for libSBML is available as a separate download from
the same locations as the libSBML distribution (namely, the SBML
project on <a target="_blank"
href="http://sf.net/projects/sbml/files/libsbml/@PACKAGE_VERSION@">SourceForge</a>
and the <a href="http://sbml.org/Software/libSBML"
target="libSBML">SBML.org website</a>).  You may also regenerate the
documentation from the source code distribution; please see the
instructions in section <a href="#docs">Configuring for generating
documentation</a> below.


<h3><a class="anchor" name="quick-windows">Building libSBML on Windows</a></h3>

<p> For building libSBML on Windows, the libSBML source distribution
includes project files for several versions of Microsoft Visual Studio
running on Windows XP (32-bit), Windows Vista (64-bit) or Windows&nbsp;7
(64-bit).  Please see the instructions in the <a href="#windows">section
below</a> for information about how to use these to build libSBML on
Windows.


<h2><a class="anchor" name="detailed">2. Detailed instructions for configuring and installing LibSBML</a></h2>

<p> LibSBML requires a separate XML library for low-level XML tokenizing
and Unicode support.  For this, it supports the Xerces-C++, Expat, and
libXML XML libraries on Linux, Windows, Mac&nbsp;OS&nbsp;X, FreeBSD, Solaris and
Cygwin.  Many Linux and other UNIX-like systems provide one or more of
these libraries either as part of their standard distribution or as an
optional RPM, Debian, Mandrake or other package distributions.  (Libxml2
appears to be the most commonly available library on Linux and Mac&nbsp;OS&nbsp;X
systems.)  For more information, see <a target="_blank"
href="http://xerces.apache.org/xerces-c/">http://xml.apache.org/xerces-c/</a>
for Xerces, <a target="_blank"
href="http://expat.sf.net">http://expat.sf.net</a> for Expat, and <a
target="_blank" href="http://xmlsoft.org">http://xmlsoft.org</a> for
libxml2.

<p> As already noted, there is a bug in Xerces 2.6.0 that cannot be worked
around.  Xerces versions 2.2 &#150; 2.5, and 2.7.0 and above, are known to
work properly.  Expat version 1.95.8 and above, and libxml2 version 2.6.16
and above, are all known to work.


<h3><a class="anchor" name="basic-config">Configuring for Linux,
Mac&nbsp;OS&nbsp;X, FreeBSD, Solaris, and Cygwin</a></h3>

<p> If you have obtained the libSBML source code distribution, then at your
Linux, Mac&nbsp;OS&nbsp;X, FreeBSD, Solaris or Cygwin terminal command prompt,
unpack the distribution, and <code>cd</code> into the directory created
(e.g., <code>libsbml-4.1.0</code>).  If you only want to build the C and
C++ interfaces and install the results in <code>/usr/local</code> (the
default), then configuring libSBML is simply a matter of executing the
following command:

<div class="fragment"><pre class="fragment">
  ./configure
</pre></div>

<p> To specify <a target="_blank" href="http://expat.sf.net">Expat</a> or
<a target="_blank" href="http://xerces.apache.org/xerces-c/">Xerces</a>
explicitly rather than the default <a target="_blank"
href="http://xmlsoft.org">libxml2</a>, use a command such as the following
instead:

<div class="fragment"><pre class="fragment">
  ./configure --with-expat
</pre></div>
or 
<div class="fragment"><pre class="fragment">
  ./configure --with-xerces
</pre></div>

<p> If your copy of libxml2, Expat, or Xerces is installed in a
non-standard location on your computer system (e.g., a private home
directory), <code>configure</code> may not be able to find it by itself.
In this case, <code>configure</code> needs to be told explicitly where to
find the libraries.  Use the following forms:

<div class="fragment"><pre class="fragment">
  ./configure --with-libxml="<span class="placeholder"><em>DIR</em></span>"
</pre></div>
or
<div class="fragment"><pre class="fragment">
  ./configure --with-xerces="<span class="placeholder"><em>DIR</em></span>"
</pre></div>
or
<div class="fragment"><pre class="fragment">
  ./configure --with-expat="<span class="placeholder"><em>DIR</em></span>"
</pre></div>

<p> where <span class="placeholder"><em>DIR</em></span> is the
parent directory of where the <code>include</code> and <code>lib</code>
directories of Xerces, Expat or libxml2 (whichever one you are trying to
use) is located.  For example, on Mac&nbsp;OS&nbsp;X, if you used <a
target="_blank" href="http://finkproject.org">Fink</a> to install Expat in
Fink's default software tree, you would configure libSBML using the
following command:

<div class="fragment"><pre class="fragment">
  ./configure --with-expat="/sw"
</pre></div>

<p> By default, during the installation phase (i.e., when running
<code>make install</code>, discussed below), the libSBML installation
commands will copy header files to <code> /usr/local/include/sbml</code>,
the shared and static library files to <code>/usr/local/lib</code>, and
documentation files to
<nobr><code>/usr/local/share/doc/libsbml-</code><span
class="placeholder"><em>VERSION</em></span></nobr> (where <span
class="placeholder"><em>VERSION</em></span> is the version number of
libSBML).  To specify a different installation location instead of the
default, use the <nobr><code>--prefix</code></nobr> argument to the
<code>configure</code> program.  For example,

<div class="fragment"><pre class="fragment">
  ./configure --prefix="/my/favorite/path"
</pre></div>

<p> Of course, you can combine the flags to <code>configure</code>, giving both
<nobr><code>--prefix</code></nobr> and <nobr><code>--with-expat</code></nobr> or
<nobr><code>--with-xerces</code></nobr> or <nobr><code>--with-libxml</code></nobr> to set both
options.


<h3><a class="anchor" name="other-lang">Configuring interfaces to C#, Java,
Perl, Python, MATLAB, Octave, and Ruby</a></h3>

<p> LibSBML's core is written in C and C++, but libSBML comes with APIs for
other languages as well.  To enable the library extensions for C#, Java,
Perl, Python, MATLAB, Octave, and/or Ruby, you need to supply additional
options to <code>configure</code>.  These options are
<nobr><code>--with-csharp</code></nobr>, <nobr><code>--with-java</code></nobr>,
<nobr><code>--with-perl</code></nobr>,
<nobr><code>--with-python</code></nobr>, <nobr><code>--with-matlab</code></nobr>,
<nobr><code>--with-octave</code></nobr>, and <nobr><code>--with-ruby</code></nobr>, respectively.  As
with other configure options discussed above, all of these accept an
optional prefix argument; for example, on a MacOS 10.5 Intel-based system
with MATLAB version R2010a installed in its default location of
<code>/Applications/MATLAB_R2010a.app</code>, the proper argument would be

<div class="fragment"><pre class="fragment">
  ./configure --with-matlab=/Applications/MATLAB_R2010a.app
</pre></div>

<p>
If you want to build multiple language bindings for libSBML, combine
multiple flags together as in the following example:

<div class="fragment"><pre class="fragment">
  ./configure --with-java --with-python
</pre></div>

<p> The libSBML distribution ships with certain interface files provided,
so that you do not need to have the software necessary to recreate them.
However, if you obtained the libSBML distribution from the project SVN
repository on SourceForge, or you want to recreate the files deliberately,
you may need to configure libSBML to use SWIG to regenerate the libSBML
language interfaces.  Please see the section below on using <a
href="#SWIG">SWIG</a>.

<p> Finally, note that these additional language bindings are implemented
via foreign function interfaces in the respective languages; in all cases,
the core C/C++ libSBML library still must be compiled and installed.  The
language binding files are <em>not</em> standalone implementations.  For
instance, the Java language API files consist of a file named
<code>libsbmlj.jar</code> and a native object library file named (depending
on the operating system) <code>libsbmlj.jnilib</code> (Mac&nbsp;OS&nbsp;X),
<code>libsbml.so</code> (Linux), or <code>sbmlj.dll</code> (Windows);
<em>both</em> of these must be installed and shipped with applications
<em>along with</em> the core libSBML library file.  Please refer to section
<a href="#locations">Files installed by libSBML, and their locations</a>)
for an explanation of the name and location of the libSBML library file
under different operating systems.

<p class="warning"> A warning about Java versions: we have been unable to
successfully compile the libSBML Java interface using the GNU Compiler for
Java (gcj), at least in the case of gcj version&nbsp;4.4.3 under Ubuntu
Linux version&nbsp;10.10.  <b>We do not recommend using gcj</b> with
libSBML for this reason.


<h3><a class="anchor" name="other-options">Additional configuration options</a></h3>

<p> In addition to the <nobr><code>--prefix</code></nobr> and other options already
described, the libSBML configuration command supports the options
described below.


<h4><a class="anchor" name="univbinary">Creating 32- and/or 64-bit binaries</a></h4>

<p> On some hardware and operating system combinations, it is possible to
compile 64-bit as well as 32-bit versions of programs.  Normally, the most
sensible default will be chosen by the systems' compilers automatically,
but when you download third-party software or compile your own, sometimes
it becomes necessary to select specific versions.  LibSBML is no exception.
To make it easier to build libSBML explicitly in a 32-bit or 64-bit
version, <code>configure</code> offers the two optional arguments
<nobr><code>--enable-m32</code></nobr> and
<nobr><code>--enable-m64</code></nobr>, respectively.   

<p> Whether you need to do this depends very much on your hardware,
operating system, and the format of other libraries and programs on your
system.  Currently, the most common situation where this issue arises is on
64-bit systems where not all libraries (e.g., the XML parser libraries) are
available in 64-bit format.  Then, libSBML needs to be configured to be
built as a 32-bit binary:

<div class="fragment"><pre class="fragment">
  ./configure --enable-m32
</pre></div>

<p> The two options <nobr><code>--enable-m32</code></nobr> and
<nobr><code>--enable-m64</code></nobr> cannot be used together; if they are
both given, then the 32-bit option is silently ignored.  On Mac&nbsp;OS&nbsp;X
systems, where it is in fact possible to build so-called <em>universal</em>
(or "fat") binaries containing both 32-bit and 64-bit executable code, a
separate option is available for <code>configure</code> and is discussed in
the next section.


<h4><a class="anchor" name="univbinary">Creating universal binaries on Mac&nbsp;OS&nbsp;X</a></h4>

<p> Apple Macintosh operating systems after 2005 have provided the option
of building binaries that can run natively on either PowerPC or x86 (Intel)
architectures, as well as in either 32-bit or 64-bit versions.  Compiling a
library to be a so-called <em>universal binary</em> containing multiple
versions of the object code requires the use of special options at
compilation time.  To configure libSBML to be built as a universal binary,
specify the optional argument
<nobr><code>--enable-universal-binary</code></nobr> to
<code>configure</code>.  The following example illustrates how to do this:

<div class="fragment"><pre class="fragment">
  ./configure --enable-universal-binary
</pre></div>

<p>
By default, on MacOS 10.5, the libSBML option above will construct a
universal binary containing 32-bit PowerPC and 32-bit Intel x86 binaries;
on MacOS&nbsp;10.6, this becomes 32-bit PowerPC, 32-bit x86, and 64-bit x86
binaries.  If you want to build universal binaries with a different
combination of CPU architectures, then you can specify it as an optional
argument to the <nobr><code>--enable-universal-binary</nobr></code> option.
For example, universal binaries will be built with i386, ppc, x86_64 and
ppc64 architectures in the following example:

<div class="fragment"><pre class="fragment">
  ./configure --enable-universal-binary="-arch i386 -arch ppc -arch x86_64 -arch ppc64"
</pre></div>

<p> Beware that building with this option turn on results in the creation
of larger libSBML binary files, because the files contain essentially two
copies of the same code (one for each architecture).

<p> Finally, if both <nobr><code>--enable-universal-binary</nobr></code>
and either <nobr><code>--enable-m32</nobr></code> or
<nobr><code>--enable-m64</nobr></code> are given, the latter two options
are ignored and the option for universal binaries takes precedence.  This
is justified because, on Mac&nbsp;OS&nbsp;X, the optional argument to
<nobr><code>--enable-universal-binary</nobr></code> can be used to
accomplish the same goals as the two other individual options.


<h4><a class="anchor" name="swig">Configuring SWIG</a></h4>

<p> <strong>Important</strong>: libSBML is known to work with SWIG version 2.0.0
or later; earlier versions are known <em>not</em> to work.  You <em>must</em> use 
version 2.0.0 or later (The latest stable version is recommended).

<p> <a target="_blank" href="http://www.swig.org">SWIG</a> is the
<em>Simplified Wrapper and Interface Generator</em> and in libSBML it is
used to create the bindings for C#, Java, Python, and other programming
languages.  To configure libSBML to use SWIG, use the
<nobr><code>--with-swig</code></nobr> option to <code>configure</code>.  If
your copy of SWIG is installed in a location where <code>configure</code>
cannot find it on its own, you can specify it as an optional argument to
the <nobr><code>--with-swig</code></nobr> option as in the following
example:

<div class="fragment"><pre class="fragment">
  ./configure --with-swig="<em><span class="placeholder">DIR</span></em>"
</pre></div>


<h4><a class="anchor" name="unit-testing">Configuring the unit testing system</a></h4>

<p> libSBML provides built-in facilities for testing itself.  To run the
unit tests, a second library is required, <code>libcheck</code> (version
0.9.2 or higher).  <em>Check</em> is a very lightweight C unit test
framework based on the xUnit framework popularized by Kent Beck and <a
target="_blank"
href="http://en.wikipedia.org/wiki/Extreme_Programming">eXtreme
Programming</a>.  Check is quite small and once installed, it consists of
only two files: <code>libcheck.a</code> and <code>check.h</code>.  To
install Check, you may first want to examine whether it is easily available
via a software package manager for your system (e.g., <a target="_blank"
href="https://help.ubuntu.com/community/SynapticHowto">Synaptic</a> under
Ubuntu Linux, <a target="_blank"
href="http://www.macports.org">MacPorts</a> or <a target="_blank"
href="http://www.finkproject.org/">Fink</a> under Mac&Nbsp;OS&Nbsp;X, etc.); if not,
you can also download Check from <a target="_blank"
href="http://check.sf.net/">http://check.sf.net/</a>.

<p> (Note: If you are using g++ version 3.3, you will need to avoid
using Check version 0.9.5, and instead use version 0.9.2.  The problem is
an incompatibility between Check 0.9.5 and earlier versions of g++.  It
appears that the compatibility problems in Check 0.9.5 disappear with
versions of g++ after 3.3.)

<p> To enable the unit testing facilities in libSBML, add the
<nobr><code>--with-check</code></nobr> flag to the configure command:

<div class="fragment"><pre class="fragment">
  ./configure --with-check
</pre></div>

<p>
Following this, you must build libSBML and then you can run the tests:

<div class="fragment"><pre class="fragment">
  make                   # Note: use 'gmake' on FreeBSD
  make check             # Note: use 'gmake check' on FreeBSD
</pre></div>

<p> The make check step is optional and will build and run an
extensive suite of unit tests to verify all facets of the library.
These tests are meant primarily for developers of libSBML and running
them is not required for the library to function properly.  All tests
should pass with no failures or errors.  If for some reason this is
not the case on your system, please submit a bug report using the
mechanisms described in the section titled "Bug Reports, Mailing
Lists, and Related Topics" elsewhere in this manual.


<h4><a class="anchor" name="compression">Configuring support for compression</a></h4>

<p> LibSBML provides built-in support for reading and writing compressed
SBML files.  This facility works transparently: if a given SBML filename
ends with one of the suffixes recognized for a compressed file (namely,
<code>.gz</code>, <code>.zip</code>, or <code>.bz2</code>), the libSBML
<code>readSBML()</code> method will automatically decompress the file upon
reading it and the <code>writeSBML()</code> method will compress the file
upon writing it.  (Files whose names have no extensions are read and
written in uncompressed form.)

<p> These features are enabled by default if the required libraries can be
found on your system.  The libraries are the <a target="_blank"
href="http://www.zlib.net/">zlib</a> library (for the <em>gzip</em> and
<em>zip</em> formats) and the <a target="_blank"
href="http://www.bzip.org/">bzip2</a> library (for the <em>bzip2</em>
format).  If the libSBML configure program cannot find the libraries in the
locations where it searches by default, you can inform the configure
program where to look by adding the flag
<nobr><code>--with-zlib=</code><span
class="placeholder"><em>DIR</em></span></nobr> where <span
class="placeholder"><em>DIR</em></span> is the parent directory of the
<code>lib</code> directory where the zlib library is located, and/or the
flag <nobr><code>--with-bzip2=</code><span
class="placeholder"><em>DIR</em></span></nobr> where <span
class="placeholder"><em>DIR</em></span> is the parent directory of the
<code>lib</code> directory where the bzip2 library is located.

<p> To selectively disable specific library checks and format support, add
the option <nobr><code>--with-zlib=no</code></nobr> and/or
<nobr><code>--with-bzip2=no</nobr></code> to the configure program
invocation.  Or, to completely disable compression support and checking for
both libraries, add the <nobr><code>--enable-compression=no</code></nobr>
option to configure:

<div class="fragment"><pre class="fragment">
  ./configure --enable-compression=no
</pre></div>


<h4><a class="anchor" name="docs">Configuring for generating documentation</a></h4>

<p> LibSBML comes with extensive documentation, and the document you are
currently reading is part of it.  Because the documentation is large and
regenerating it requires the use of software tools that not all users may
have, the authors of libSBML supply a separate downloadable archive
containing only the documentation.  The documentation archive file has a
name of the form <code>libsbml-</code><em><span
class="placeholder">VERSION</span></em><code>-docs.zip</code>, where
<em><span class="placeholder">VERSION</span></em> is the version of
libSBML.  After you download it, you can simply unzip the file in the same
location as your libSBML source directory (or alternatively, in any other
location that suits you).  We recommend downloading the ready-made
documentation archive as the easiest way to get the libSBML documentation.

<p> The same documentation files should also be available online at <a
target="_blank"
href="http://sbml.org/Software/libSBML/">http://sbml.org/Software/libSBML/</a>,
although this online copy normally corresponds to the last stable release
of libSBML and may not be up-to-date with the latest development version of
libSBML in the SVN repository on SourceForge.

<p> If you would like to generate the documentation yourself, you will need
the following software tools in addition to a Unix-like environment (or
<a target="_blank" href="http://cygwin.org">Cygwin</a> under Windows):
<ul>

<li style="margin-bottom: 1em"><em>For the C, C++ and Python API
documentation</em>: You will need <a target="_blank"
href="http://doxygen.org">Doxygen</a> version 1.6.3 or later and a
reasonably complete installation of <a target="_blank"
href="http://ctan.org/what_is_tex.html">LaTeX</a>.  You will also need to
configure libSBML to use Doxygen by supplying the option
<nobr><code>--with-doxygen</code></nobr> to the <code>configure</code>
program.  <em>Tip for Macintosh users</em>: if you are on a Mac&nbsp;OS&nbsp;X
system and you installed the binary distribution of Doxygen from the
<code>.dmg</code> image provided by Doxygen's author, you will need to
point <code>configure</code> to the doxygen executable inside the package
for Doxygen:

<div class="fragment"><pre class="fragment">
  ./configure --with-doxygen=/Applications/Doxygen.app/Contents/Resources
</pre></div>
</li>

</li> <li style="margin-bottom: 1em"><em>For the Java API
documentation</em>: You will need <a target="_blank"
href="http://java.sun.com/j2se/javadoc/">Javadoc</a> version 1.5 (also
known as version 5.0, confusingly enough), which should have come
supplied with your installation of Java 1.5 or later.  No additional
configuration of libSBML is needed beyond supplying the
<nobr><code>--with-java</code></nobr> option to <code>configure</code>.
</li>
</ul>

<p> Once libSBML is configured as above, you can generate the documentation
files by running <nobr><code>make docs</code></nobr> from the top level of
the libSBML source directory to regenerate all the documentation files.
Alternatively, you can moving to the <code>docs/src</code> subdirectory and
execute

<div class="fragment"><pre class="fragment">
  make java-manual                   # Note: use 'gmake java-manual' on FreeBSD
</pre></div>
to recreate just the Java documentation, or 
<div class="fragment"><pre class="fragment">
  make cpp-manual                    # Note: use 'gmake cpp-manual' on FreeBSD
</pre></div>
to recreate just the C++ documentation, or 
<div class="fragment"><pre class="fragment">
  make c-manual                      # Note: use 'gmake c-manual' on FreeBSD
</pre></div>
to recreate just the C documentation, or
<div class="fragment"><pre class="fragment">
  make python-manual                 # Note: use 'gmake python-manual' on FreeBSD
</pre></div>
to recreate just the Python documentation.



<h3><a class="anchor" name="compiling">Compiling and installing libSBML on
Unix, Linux and Mac&nbsp;OS&nbsp;X</a></h3>

<p> Once configured, building and installing libSBML should be very easy.
Simply execute the following commands at your Linux, Mac&nbsp;OS&nbsp;X or
Solaris command prompt:

<div class="fragment"><pre class="fragment">
  make                      # Note: use 'gmake' on FreeBSD
  make install              # Note: use 'gmake install' on FreeBSD
</pre></div>

<p> Note that you will probably have to perform the <code>make
install</code> command as the user 'root' on your system if you used the
default installation directory (<code>/usr/local</code>) or you set
<nobr><code>--prefix</code></nobr> to a system directory that only root is
permitted to write into.  (A quick way to run a command as root is to use
the <code>sudo</code> command; i.e., run <code><nobr>sudo make
install</nobr></code>.)

<p> Please refer to the section titled "<a href="#locations">Files
installed by libSBML, and their locations</a>" for information about the
locations where the installation step copies the various libSBML files.



<h3><a class="anchor" name="windows">Configuring and building for Windows</a></h3>

<p> The source libSBML distribution, obtainable from the <a target="_blank"
href="http://sf.net/projects/sbml/files/libsbml/@PACKAGE_VERSION@">
project download site on SourceForge.net</a>, is a <code>.zip</code> file
that must be extracted in a directory on your system, compiled and
installed.  There are two ways to compile libSBML under Windows: using the
native Windows compilation tools from Microsoft, and using the <a
target="_blank" href="http://cygwin.org/">Cygwin</a> environment.  In this
section, we focus on using the native Windows environment because this
appears to be the more popular approach used by Windows-based users of
libSBML.  Cygwin users can follow essentially the same <a
href="#basic-config">instructions as for other Unix environments</a> given
above.

<h4>Prerequisites</h4>

<p> The source distribution includes project files for Microsoft Visual
Studio; version 7.1 (2003) is the minimum version of MSVC needed.  In
addition, to compile LibSBML, you <b>must have certain other libraries
installed</b> that are not included in the source code
distribution.  They must be obtained separately if you do not already have
them on your system:

<ol>
<li style="margin-bottom: 1em"><em>XML parser library</em>: LibSBML
requires an underlying XML parser library.  It can use <a target="_blank"
href="http://xmlsoft.org">libxml2</a>, <a target="_blank"
href="http://http://xerces.apache.org/xerces-c/">Xerces-C</a>, or <a
target="_blank" href="http://expat.sourceforge.net/">Expat</a>.  Whichever
one you choose, the DLL file for the parser library must be placed in the
<code>win32/bin</code> subdirectory of the libSBML directory prior to
attempting to compile libSBML.

<li style="margin-bottom: 1em"><em>Compression libraries</em>: In
addition to an XML parser library, LibSBML also needs the compression
libraries <a target="_blank" href="http://www.zlib.net/">zlib</a> and <a
target="_blank" href="http://www.bzip.org/">bzip2</a> if you wish to include
support for reading and writing compressed SBML files.  This is not a
requirement, and the support for compression can optionally be turned off.

</ol>


<h4>Compilation</h4>

<p> The libSBML <code>win</code> subdirectory contains several
subdirectories with names of the form <code>msvc</code><span
class="placeholder"><em>X</em></span>; these subdirectories organize the
project files for different Microsoft Visual Studio versions.  For example,
<code>win/msvc7</code> contains the project files for MSVC version 7.
Within the individual project directories <code>msvc</code><span
class="placeholder"><em>X</em></span>, there are several subdirectories
with names of the form <code>msvc</code><span
class="placeholder"><em>X</em></span><code>/</code><span
class="placeholder"><em>LANG</em></span>, each containing the project files
for a specific version XML parser library, as well as a common subdirectory
containing files that are not parser-library-dependent.  All told, this
directory organization has the following structure:

<p style="padding-left: 2em"><code>
win<br>
<span style="padding-left: 3.5ex">/batch-files<br>
<span style="padding-left: 3.5ex">/msvc7</span><br>
<span style="padding-left: 9.5ex">/common</span><br>
<span style="padding-left: 16ex">/...</span><br>
<span style="padding-left: 9.5ex">/expat</span><br>
<span style="padding-left: 16ex">/libsbml.vcproj</span><br>
<span style="padding-left: 16ex">/libsbml_csharp.vcproj</span><br>
<span style="padding-left: 16ex">/libsbml_java.vcproj</span><br>
<span style="padding-left: 16ex">/libsbml_perl.vcproj</span><br>
<span style="padding-left: 16ex">/libsbml_python.vcproj</span><br>
<span style="padding-left: 9.5ex">/libxml</span><br>
<span style="padding-left: 16ex">/...</span><br>
<span style="padding-left: 9.5ex">/xerces</span><br>
<span style="padding-left: 16ex">/...</span><br>
<span style="padding-left: 3.5ex">/msvc8</span><br>
<span style="padding-left: 9.5ex">/...</span><br>
<span style="padding-left: 3.5ex">/msvc9</span><br>
<span style="padding-left: 9.5ex">/...</span><br>
</code>

<p> The <code>batch-files</code> subdirectory contains Windows batch files
to perform various actions, such as to create the <code>include</code>
directory of header files used by libSBML, as well as to invoke SWIG, and
perform other tasks.  These batch files may need to be edited to use
pathnames relevant to a particular system.

<p> A few additional points are worth noting here.  First, the project
files include support for the proposed SBML Level&nbsp;2 Layout extension
by Gauges et al.  Second, the project files in <code>msvc8</code> support a
64-bit Windows configuration.  And finally, the libSBML developers have not
tested any native Windows-compatible compilers besides the Microsoft Visual
Studio series.  If you succeed in using compilation environment, please let
the libSBML developers know so that we can include support in future
versions of libSBML.

<p>
To build libSBML on Windows, follow these steps:

<ol>
<li style="margin-bottom: 1em">Choose and open the required project(s) from
within the MSVC IDE.

<li style="margin-bottom: 1em">Given the variation in Windows systems, the
paths to the header files and libraries are not hard-coded into these
project files.  To inform MSVC where to find the files, use the
<code>Tools->Options</code> menu item in the IDE, and select
<code>Projects/Directories</code>. Paths to header files and library files
can then be added.  Once added, these are remembered by the IDE.

<li style="margin-bottom: 1em"> You will also need to add paths to the
header files and library files for any of the third-party libraries used.

<li style="margin-bottom: 1em"> Compile.

</ol>

<p>
After a successful build, MSVC will put the libSBML library files and DLL
into the <code>win/bin</code> subdirectory.


<h4>Language bindings when building under Windows</h4>

<p> The MSVC projects call a prebuild event to generate the necessary files
using SWIG.  Although the source distribution for libSBML contains these
files, they are actually prebuilt on a Unix system, and in some cases there
are differences between these and the SWIG files intended for a native
Windows environment.  We recommend that you rebuild these files using
<code>swigwin</code> (the native Windows version of SWIG).  This will
happen automatically when building the relevant project.  You will need to
edit the relevant <code>runSWIG_</code> batch file to establish the correct
path to your <code>swigwin</code> installation.

<p> Any language binding library/DLL files will be placed in a subdirectory
of the <code>win/bin</code> directory.  For example, C# files will appear
in <code>win/bin/csharp</code>.  Where the language binding also involves a
language specific file (e.g., a JAR file for Java), these will be found in
the relevant <code>src/bindings/</code> directory (e.g.,
<code>src/bindings/java/java-files</code>).


<h2><a class="anchor" name="locations">3. Files installed by libSBML
version&nbsp;4.x, and their locations</a></h2>

<p> If all went as it should, the libSBML object files should end up
compiled and installed on your system, in either the default location
(<code>/usr/local/</code>) or in the location you indicated during the
configuration step as explained above.  The core libSBML library object
files will have slightly different names depending on the operating system
in use.  The following table summarizes the possibilities; note that these
names changed slightly between libSBML&nbsp;3.x and&nbsp;4.x to incorporate
the version number:

<center>
<table border="0" class="text-table width80 normal-font alt-row-colors">
 <tr style="background: lightgray; font-size: 14px;">
   <th style="border-bottom: none"></th>
   <th colspan="3" align="center">Names of core libSBML 4.x object files</th>
 </tr>
 <tr style="background: lightgray; font-size: 14px;">
     <th align="left">Type of file</th>
     <th align="left">Linux/Unix-based OS</th>
     <th align="left">Mac&nbsp;OS&nbsp;X</th>
     <th align="left">Windows</th>
 </tr>
<tr>
  <td width="180px" style="padding-right: 1em">Dynamically-linked</td>
  <td><code>libsbml.so.4</code></td>
  <td><code>libsbml.4.dylib</code></td>
  <td><code>libsbml.dll</code></td>
</tr><tr>
  <td width="180px" style="padding-right: 1em">Statically-linked</td>
  <td><code>libsbml.a</code></td>
  <td><code>libsbml.a</code></td>
  <td><code>libsbml.lib</code></td>
</tr><tr>
  <td width="180px" style="padding-right: 1em">Libtool control file</td>
  <td><code>libsbml.la</code></td>
  <td><code>libsbml.la</code></td>
  <td><code>sbmlj.la</code></td>
</tr>
</table>
</center>

<p>
If you have compiled additional language extensions with libSBML, these files
will be installed as well, but their names and locations depend on the
particular language extension.  The following two tables summarize the
possibilities.  The first table lists the names of the files, while the second
table below lists the pathnames where those files will be installed.

<center>
<table border="0" class="text-table  bigger-row-spacing  width80  normal-font">
 <tr style="background: lightgray; font-size: 14px;">
   <th colspan="2" style="border-bottom: none"></th>
   <th colspan="3" align="center">Names of language extension object files</th>
 </tr>
 <tr style="background: lightgray; font-size: 14px;">
     <th colspan="2" align="left">Language</th>
     <th align="left">Linux/Unix-based OS</th>
     <th align="left">Mac&nbsp;OS&nbsp;X</th>
     <th align="left">Windows</th>
 </tr>
<tr style="background: #f3f3f3">
  <td>C#</td>
  <td>
    <nobr><em>(unmanaged C++ DLL)</em></nobr><br>
    <nobr><em>(managed C# DLL)</em></nobr>
  </td>
  <td><code>libsbmlcs.so</code><br><code> libsbmlcsP.dll</code></td>
  <td><code>libsbmlcs.so</code><br><code> libsbmlcsP.dll</code></td>
  <td><code>libsbmlcs.dll</code><br><code> libsbmlcsP.dll</code></td>
</tr><tr>
  <td>Java</td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Java JAR file)</em></nobr>
  </td>
  <td><code>libsbmlj.so</code><br><code> libsbmlj.jar</code></td>
  <td><code>libsbmlj.jnilib</code><br><code> libsbmlj.jar</code></td>
  <td><code>sbmlj.dll</code><br><code> libsbmlj.jar</code></td>
</tr><tr style="background: #f3f3f3">
  <td rowspan="4">MATLAB</td>
  <td style="border-bottom: 1px dotted #aaa" valign="middle">
    <nobr><em>(Intel 32-bit)</em></nobr>
  </td>
  <td style="border-bottom: 1px dotted #aaa" valign="top">
    <code>TranslateSBML.mexglx</code><br>
    <code>OutputSBML.mexglx</code><br>
  </td>
  <td style="border-bottom: 1px dotted #aaa" valign="top">
    <code>TranslateSBML.mexmaci</code></br>
    <code>OutputSBML.mexmaci</code></br>
  </td>  
  <td style="border-bottom: 1px dotted #aaa" valign="top">
    <code>TranslateSBML.mexw32</code><br>
    <code>OutputSBML.mexw32</code><br>
  </td>
</tr><tr>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="middle">
    <nobr><em>(Intel 64-bit)</em></nobr>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <code>TranslateSBML.mexa64</code><br>
                   <code>OutputSBML.mexa64</code>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <code>TranslateSBML.mexmaci64</code></br>
                   <code>OutputSBML.mexmaci64</code></br>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <code>TranslateSBML.mexw64</code><br>
                   <code>OutputSBML.mexw64</code><br>
  </td>
</tr><tr>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="middle">
    <nobr><em>(PPC)</em></nobr>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <em>N/A</em><br><br>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <code>TranslateSBML.mexmac</code><br>
                   <code>OutputSBML.mexmac</code>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <em>N/A</em><br><br>
  </td>
</tr><tr>
  <td valign="middle" style="background: #f3f3f3">
    <nobr><em>(Additional files)</em></nobr>
  </td>
  <td valign="top" style="background: #f3f3f3">
                   <code>CheckAndConvert.m</code><br>
                   <code>Contents.m</code><br>
                   <code>ConvertFormulaToMathML.m</code><br>
                   <code>isSBML_Model.m</code><br>
                   <code>isoctave.m</code><br>
  </td>
  <td valign="top" style="background: #f3f3f3">
                   <code>CheckAndConvert.m</code><br>
                   <code>Contents.m</code><br>
                   <code>ConvertFormulaToMathML.m</code><br>
                   <code>isSBML_Model.m</code><br>
                   <code>isoctave.m</code><br>
  </td>
  <td valign="top" style="background: #f3f3f3">
                   <code>CheckAndConvert.m</code><br>
                   <code>Contents.m</code><br>
                   <code>ConvertFormulaToMathML.m</code><br>
                   <code>isSBML_Model.m</code><br>
                   <code>isoctave.m</code><br>
  </td>
</tr><tr>
  <td colspan="2">Octave</td>
  <td><code>TranslateSBML.mex</code><br>
      <code>OutputSBML.mex</code><br>
      <code>CheckAndConvert.m</code>
      <code>Contents.m</code><br>
      <code>ConvertFormulaToMathML.m</code><br>
      <code>isSBML_Model.m</code><br>
      <code>isoctave.m</code><br>
  </td>
  <td><code>TranslateSBML.mex</code><br>
      <code>OutputSBML.mex</code><br>
      <code>CheckAndConvert.m</code>
      <code>Contents.m</code><br>
      <code>ConvertFormulaToMathML.m</code><br>
      <code>isSBML_Model.m</code><br>
      <code>isoctave.m</code><br>
  </td>
  <td><code>TranslateSBML.mex</code><br>
      <code>OutputSBML.mex</code><br>
      <code>CheckAndConvert.m</code>
      <code>Contents.m</code><br>
      <code>ConvertFormulaToMathML.m</code><br>
      <code>isSBML_Model.m</code><br>
      <code>isoctave.m</code><br>
  </td>
</tr><tr style="background: #f3f3f3">
  <td>Perl</td>
  <td valign="top">
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Perl module file)</em></nobr><br>
    <nobr><em>(Other files)</em></nobr>
  </td>
  <td><code>LibSBML.so</code><br>
      <code>LibSBML.pm</code><br>
      <code>LibSBML.pod</code><br>
      <code>.packlist</code></td>
  <td><code>LibSBML.bundle</code><br>
      <code>LibSBML.pm</code><br>
      <code>LibSBML.pod</code><br>
      <code>.packlist</code></td>
  <td><code>LibSBML.dll</code><br>
      <code>LibSBML.pm</code><br>
      <code>LibSBML.pod</code><br>
      <code>.packlist</code></td>
</tr><tr>
  <td>Python <nobr>2.3&ndash;2.4</nobr></td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Python module file)</em></nobr><br>
    <nobr><em>(Compiled module file)</em></nobr><br>
    <nobr><em>(Path configuration file)</em></nobr>
  </td>
  <td><code>_libsbml.so</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
  <td><code>_libsbml.so</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
  <td><code>_libsbml.dll</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
</tr><tr style="background: #f3f3f3">
  <td>Python <nobr>2.5&ndash;2.7</nobr></td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Python module file)</em></nobr><br>
    <nobr><em>(Compiled module file)</em></nobr><br>
    <nobr><em>(Path configuration file)</em></nobr>
  </td>
  <td><code>_libsbml.so</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
  <td><code>_libsbml.so</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
  <td><code>_libsbml.pyd</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
</tr><tr>
  <td colspan="2">Ruby</td>
  <td><code>libSBML.so</code></td>
  <td><code>libSBML.bundle</code></td>
  <td><code>libSBML.dll</code></td>
</tr>
<caption class="bottom-caption" style="text-align: left">Legend: N/A = not available.
</caption>
</table>
</center>

<p> The next table gives the locations of the files listed in the table
above for Linux/Unix-based operating systems.  The pathnames shown here are
relative to the prefix directory used in configuring libSBML (meaning the
value <em><span class="placeholder">DIR</span></em> given to the
<nobr><code>--prefix=</code><em><span
class="placeholder">DIR</span></em></nobr> option to the
<code>configure</code> program discussed above).

<center>
<table border="0" class="text-table  bigger-row-spacing  width80  normal-font  alt-row-colors">
 <tr style="background: lightgray; font-size: 14px;">
     <th colspan="2" align="left">Language</th>
     <th align="left">Directories</th>
     <th align="left">Notes</th>
 </tr>
<tr>
  <td>C#</td>
  <td>
    <em>(unmanaged C++ DLL)</em><br>
    <em>(managed C# DLL)</em>
  </td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/mono/libsbmlcsP/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/mono/libsbmlcsP/</code></nobr></td>
  <td></td>
</tr><tr>
  <td>Java</td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Java JAR file)</em></nobr>
  </td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/share/java/</code></nobr></td>
  <td></td>
</tr><tr>
  <td colspan="2">MATLAB</td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code></nobr></td>
  <td></td>
</tr><tr>
  <td colspan="2">Octave</td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/octave/site/oct/</code><em><span class="placeholder">platform</span></em><code>/</code></nobr></td>
  <td>(1)</td>
</tr><tr>
  <td>Perl</td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Perl module file)</em></nobr><br>
    <nobr><em>(Other files)</em></nobr>
  </td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/perl5/site_perl/</code><em><span class="placeholder">perl-version</span></em><code>/</code><em><span class="placeholder">platform</span></em><code>/auto/libSBML/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/perl5/site_perl/</code><em><span class="placeholder">perl-version</span></em><code>/</code><em><span class="placeholder">platform</span></em><code>/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/perl5/site_perl/</code><em><span class="placeholder">perl-version</span></em><code>/</code><em><span class="placeholder">platform</span></em><code>/</code></nobr></td>
  <td>(2)</td>
</tr><tr>
  <td>Python</td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Python module file)</em></nobr><br>
    <nobr><em>(Compiled module file)</em></nobr><br>
    <nobr><em>(Path configuration file)</em></nobr>
  </td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code><em><span class="placeholder">python-version</span></em><code>/site-packages/libsbml/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code><em><span class="placeholder">python-version</span></em><code>/site-packages/libsbml/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code><em><span class="placeholder">python-version</span></em><code>/site-packages/libsbml/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code><em><span class="placeholder">python-version</span></em><code>/site-packages/</code></nobr></td>
  <td>(2)</td>
</tr><tr>
  <td colspan="2">Ruby</td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/ruby/site_ruby/</code><em><span class="placeholder">ruby-version</span></em><code>/</code><em><span class="placeholder">platform</span></em><code>/</code></nobr></td>
  <td></td>
</tr>
<caption class="bottom-caption" style="text-align: left">Legend: The
placeholder <em><span class="placeholder">platform</span></em> stands for a
platform-specific directory name; the exact string depends on the
combination of your operating system, machine architecture, programming
language, and the versions of all of these.  The placeholder <em><span
class="placeholder">perl-version</span></em> refers to the version number
of the Perl executable against which libSBML was configured.  The
placeholder <em><span class="placeholder">python-version</span></em> refers
to the version number of the Python executable against which libSBML was
configured.  The placeholder <em><span
class="placeholder">ruby-version</span></em> refers to the version number
of the Ruby executable against which libSBML was configured.  Note that
none of these values are actually under the control of libSBML; they are
set by the operating system and programming language package conventions.
<br><br> Additional notes: <br>
(1) The Octave installation directory actually depends on
how Octave was configured at build time.  If your installation of Octave
came as a precompiled binary, the package directory may in fact be
different from what is shown here.
<br>(2) The directory component <code>lib</code> may be replaced by
<code>lib64</code> on some 64-bit operating systems (e.g., CentOS 5.2
x86-64).
</caption>

</table>
</center>


<h2><a class="anchor" name="accessing">4. What to do after building and
installing libSBML</a></h2>

<p> Once the libSBML files are installed as described in the sections
above, you may need to perform additional steps so that software can find
the libSBML library files at <em>run</em> time.  Please see the instructions
in the the section titled <a href="libsbml-accessing.html">Making libSBML
accessible to your software</a>.

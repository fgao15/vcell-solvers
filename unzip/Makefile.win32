# NMAKE Makefile for Windows NT/Windows 95
#   D. Feinleib 7/92 <t-davefe@microsoft.com>
#   H. Gessau 9/93 <henryg@kullmar.kullmar.se>
#   J. Lee 8/95 (johnnyl@microsoft.com)
#   C. Spieler 03/99
#
# Last revised:  10 Feb 2001
#
# Tested with VC++ 2.0 for NT for MIPS and Alpha, Visual C++ 2.2 for Intel CPUs
# Revision tested with VC++ 5.0 and 6.0 for Intel CPUs
#

# Nmake macros for building Windows NT applications
# To build with debug info use 'nmake debug=1'
!IFNDEF debug
NODEBUG=1
!ENDIF

!ifdef NOASM
APPLY_ASMCRC=0
!else
!ifdef USEASM
APPLY_ASMCRC=1
!endif
!endif

!ifndef APPLY_ASMCRC
#default to generic C code for now...
APPLY_ASMCRC=0
!endif

!ifndef USE_IZTIMEZONE
#default: do not use the IZ timezone replacement
USE_IZTIMEZONE=0
!endif

!IF "$(CPU)" == ""  &&  "$(PROCESSOR_ARCHITECTURE)" == "x86"
CPU = i386
!ENDIF
!IF "$(CPU)" == ""  &&  "$(PROCESSOR_ARCHITECTURE)" == "MIPS"
CPU = $(PROCESSOR_ARCHITECTURE)
!ENDIF
!IF "$(CPU)" == ""  &&  "$(PROCESSOR_ARCHITECTURE)" == "ALPHA"
CPU = $(PROCESSOR_ARCHITECTURE)
!ENDIF
!IF "$(CPU)" == ""  &&  "$(PROCESSOR_ARCHITECTURE)" == "PPC"
CPU = $(PROCESSOR_ARCHITECTURE)
!ENDIF
!IF "$(CPU)" == ""
CPU = i386
!ENDIF

!include <ntwin32.mak>

# special subdirectory for the static library binaries, to separate them
# from other binaries (including dll import library file)
OBDIR = ow32lib
OB = $(OBDIR)/

# object files
OBJDIR = .\release

OBJU1 = $(OBJDIR)\unzip.obj $(OBJDIR)\$(CRC32).obj $(OBJDIR)\crctab.obj \
	$(OBJDIR)\crypt.obj $(OBJDIR)\envargs.obj $(OBJDIR)\explode.obj
OBJU2 = $(OBJDIR)\extract.obj $(OBJDIR)\fileio.obj $(OBJDIR)\globals.obj \
	$(OBJDIR)\inflate.obj $(OBJDIR)\list.obj $(OBJDIR)\match.obj
OBJU3 = $(OBJDIR)\process.obj $(OBJDIR)\ttyio.obj $(OBJDIR)\unreduce.obj \
	$(OBJDIR)\unshrink.obj $(OBJDIR)\zipinfo.obj
OBJUS = $(OBJDIR)\win32.obj $(OBJDIR)\nt.obj $(TIMEZONE_OBJU)
OBJU  = $(OBJU1) $(OBJU2) $(OBJU3) $(OBJUS)

UNZIP_H = unzip.h unzpriv.h globals.h win32/w32cfg.h

!if $(APPLY_ASMCRC) != 0
CFVARS_ASM = -DASM_CRC
!else
CFVARS_ASM = -DNO_ASM
!endif

!if $(USE_IZTIMEZONE) != 0
LOCAL_UNZIP = -DW32_USE_IZ_TIMEZONE $(LOCAL_UNZIP)
!endif

#CF_LOC = -nologo -J -D_MBCS $(CFVARS_ASM) -DREENTRANT
CF_LOC = -nologo -J -D_MBCS $(CFVARS_ASM) $(LOCAL_UNZIP)

cvars = $(cvars) $(CF_LOC)

!if $(APPLY_ASMCRC) != 0
CRC32 = crc_i386
CRC32X = $(CRC32)
CRC32F = $(CRC32)
CRC32L = crci386l
CRC32G = crci386g
CRC32B = crci386b
!else
CRC32 = crc32
CRC32X = crc32_
CRC32F = $(CRC32)
CRC32L = crc32l
CRC32G = crc32g
CRC32B = crc32b
!endif

!if $(USE_IZTIMEZONE) != 0
TIMEZONE_OBJU = timezone.obj
TIMEZONE_OBJX = timezon_.obj
TIMEZONE_OBJD = timezonl.obj
TIMEZONE_OBLX = timezolx.obj
TIMEZONE_OBJB = $(OB)timezonb.obj
!else
TIMEZONE_OBJU =
TIMEZONE_OBJX =
TIMEZONE_OBJD =
TIMEZONE_OBLX =
TIMEZONE_OBJB =
!endif

# USER32.LIB is needed for OemToChar and related routines
conlibs=$(conlibs) user32.lib
conlibsmt=$(conlibsmt) user32.lib
conlibsdll=$(conlibsdll) user32.lib

# Some optimization (if not debugging)
!IFDEF NODEBUG
cdebug = -O2
cdbgsz = -O1
!ELSE
cdbgsz = $(cdebug)
!ENDIF

!IFDEF PROFILEINFO
ldebug = $(ldebug) /PROFILE
!endif

!IFDEF DLLSTANDALONE
# the standalone variant of unzip32.dll is linked against the
# multithread-safe static C runtime library
cvars_izdll = $(cvarsmt)
conlibs_izdll = $(conlibsmt)
!ELSE
# the (normal) variant of unzip32.dll is linked against the import library
# of multithread-safe C runtime dll
# -> smaller dll size; efficient use of shared resources,
#    but requires the C RTL DLL msvcrt.dll to be installed at runtime
cvars_izdll = $(cvarsdll)
conlibs_izdll = $(conlibsdll)
!ENDIF

CFLAGS_UN = $(cdebug) $(cflags) $(cvarsmt) -TP -D_CRT_SECURE_NO_DEPRECATE
CFLAGS_SX = $(cdbgsz) $(cflags) $(cvars) -DSFX
CFLAGS_FU = $(cdebug) $(cflags) $(cvars) -DFUNZIP
CFLAGS_DL = $(cdebug) $(cflags) $(cvars_izdll) -DWINDLL -DDLL
CFLAGS_SL = $(cdbgsz) $(cflags) $(cvars) -DWINDLL -DDLL -DUNZIPLIB -DSFX
CFLAGS_GX = $(cdbgsz) $(cflags) $(cvars) -DSFX
CFLAGS_LB = $(cdebug) $(cflags) $(cvars) -DWINDLL -DDLL -DUNZIPLIB


UNZIPLIB = unzip32.lib


ALL : $(UNZIPLIB)

$(OBJDIR) :
    if not exist "$(OBJDIR)" mkdir "$(OBJDIR)"
	
$(UNZIPLIB): $(OBJDIR) $(OBJU) 
	lib $(OBJU) /out:$@

# How to compile sources
.c{$(OBJDIR)}.obj:
	$(cc) $(CFLAGS_UN) -Fo$@ $<
	
$(OBJDIR)\win32.obj: win32\win32.c
	$(cc) $(CFLAGS_UN) -I. win32/win32.c -Fo$@

$(OBJDIR)\nt.obj: win32/nt.c
	$(cc) $(CFLAGS_UN) -I. win32/nt.c -Fo$@	

!ifdef USEMASM
crc_i386.obj:	win32/crc_i386.asm
	masm -ml win32/crc_i386.asm,$@;
!else
!ifdef USEML
crc_i386.obj:	win32/crc_i386.asm
	ml -c -Cp -coff -Fo$@ win32/crc_i386.asm
!else
crc_i386.obj:	win32/crc_i386.c
	$(cc) $(CFLAGS_UN) -I. win32/crc_i386.c -Fo$@
!endif
!endif


clean:
	del $(OBJU) $(UNZIPLIB)

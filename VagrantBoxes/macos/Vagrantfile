# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "jhcook/macos-sierra"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../..", "/vagrant_numerics", type: "nfs"
  config.vm.synced_folder ".", "/vagrant", type: "nfs"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  	vb.name = "macos"
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
     # 1st time, interactively login to the box (currently macos 10.12.5)
     # (1) Manually install XCode from App Store (requires Apple ID)
     # (2) start XCode - accept license agreement - finishes install
     # (3) if prompted, apply macos updates (30 minutes)
     # (4) "xcode-select --install" - accept license agreement
     #
     # install gfortran into /usr/local
     # (5) download gfortran from http://prdownloads.sourceforge.net/hpc/gfortran-7.1-bin.tar.gz?download
     #     gunzip gfortran-7.1-bin.tar.gz
     #     sudo tar -xvf gfortran-7.1-bin.tar -C / 
     #
     # install homebrew, cmake, boost
     # (6) /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
     # (7) brew install cmake
     # (8) brew install boost
     #
     # install hdf5 1.8 with c++ into path (have to force the install of hdf5 to add to path)
     # (9)  brew tap homebrew/science
     # (10) brew install homebrew/science/hdf5@1.8 --c++11
     #        this brew formula pointed to hdf5 1.8.18 source archive https://support.hdfgroup.org/ftp/HDF5/current18/src/hdf5-1.8.18.tar.bz2
     #        this file didn't exist ... https://support.hdfgroup.org/ftp/HDF5/current18/src/hdf5-1.8.18.tar.bz2
     # (11) brew edit homebrew/science/hdf5@1.8
     #        replace url with https://support.hdfgroup.org/ftp/HDF5/current18/src/hdf5-1.8.18.tar.bz2
     # (12) brew install homebrew/science/hdf5@1.8 --c++11
     #        it will fail with a bad sha256 hash for the downloaded hdf5 file ... copy correct sha256 hash from error message
     # (13) brew edit homebrew/science/hdf5@1.8
     #        replace sha256 with sha256 hash from clipboard (previous error message)
     # (14) brew install homebrew/science/hdf5@1.8 --c++11
     # (15) brew link hdf5@1.8 --force
   	
SHELL
end
